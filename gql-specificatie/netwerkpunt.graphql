""" 
  Graphql Schemadefinitie tbv interactie met het netwerkpunt.
  Versie 0.0.2

  contact:
    name: "iStandaarden"
    url: "https://istandaarden.nl"
    email: info@istandaarden.nl
"""
scalar UUID
scalar Date
scalar Time

schema {
  query: Query
  mutation: Mutation
}

"""
  Queries
"""
type Query {
    # Abonnement callback
    abonnementCallback($xRequestID: xRequestID!): Abonnement!

    # Abonnement ophalen met ID
    getAbonnement($id: abonnementId!): Abonnement!

    # notificatie
    getNotificatie($xOrgKey: xOrgKey!, $xRequestID: xRequestID!): Abonnement!

    # consent(s) ophalen 
    getConsent($xRequestID: String!, $Scope: scope, $onderwerp: onderwerp, $wettelijkeGrondslag: wettelijkeGrondslag, $afgiftedatumBegin: Time, $afgiftedatumEind: Time, $vervaldatumBegin: Time, $vervaldatumEind: Time): Consent!

    # metadata ophalen - Raadplegen metadata van het netwerkpunt
    getMetadata: metadata!
}

"""
  Mutaties
"""
type Mutation {
    # Abonnement aanmaken
    createAbonnement(input: CreateAbonnement!): CreateAbonnementResponse!

    # Abonnement delete
    deleteAbonnement(input: DeleteAbonnement!): DeleteAbonnementResponse!
}

"""
  Objects
"""
# Abonnement
type Abonnement {
    abonnementId: UUID! # AbonnementID
    organisatieId: String! #identificatie van de organisatie
    abonnementType: String! # voor welke type abonnement is gezet
    idType: String! # type identificatie
    id: String! # identificatie van het object waar het abonnement op is geplaatst
    createdAt: Time! 
    updatedAt: Time!
    deletedAt: Time
}

type CreateAbonnementResponse {
  abonnementID: UUID!
}

type DeleteAbonnementResponse {
  responseCode: [deleteResponse]!
}

input CreateAbonnement {
    organisatieId: String! #identificatie van de organisatie
    abonnementType: String! # type abonnenment
    idType: String! # type identificatie
    id: String! # identificatie van het object waar het abonnement op is geplaatst
}

input DeleteAbonnement {
    abonnementId: UUID! # AbonnementID
}

type consent {
    consentId: UUID! # Consent identificatie
    scope: String! # Scope van de consent
    onderwerp: String! # Onderwerp van de consent
    wettelijkeGrondslag: String! # Wettelijke grondslag van de consent
    afgiftedatum: Time! # Afgiftedatum consent
    vervaldatum: Time # Vervaldatum consent
    createdAt: Time! 
    updatedAt: Time!
    deletedAt: Time
}

type metadata {
    identifier: String # De unieke identificatie van de een specifieke versie van de gegevensstandaard
    title: String # De naam van de modelgegevensset e.g. Indicatieregister
    description: String # Beschrijving van de modelgegevensset
    modified: Time # De datum waarop de modelgegevensset voor het laatst is gewijzigd
    language: String # De taal waarin de inhoud van de modelgegevensset is uitgedrukt e.g. Nederlands
    authority: String # Overheidsorganisatie die de wettelijke verantwoordelijkheid draagt voor de inhoud (strekking) van de modelgegevensset
    publisher: String # De beheerorganisatie die verantwoordelijk is voor de publicatie van de dataset
    spatial: String # Geografisch gebied waar de modelgegevensset betrekking op heeft e.g. Landelijk
    temporal: String # Periode waar de modelgegevensset betrekking op heeft
    hasVersion: String # De versie van de modelgegevensset e.g. 1.0
}

"""
Notificatie type is niet nodig want is subset van abonnement. Een select van de onderstaande kolommen uit type Abonnement zou voldoende moeten zijn
# Notificatie
type Notificatie {
    xOrgKey: Int! # Uniek ID van het netwerkpunt binnen het netwerk
    xRequestID: String! # Identificatie van het request
    organisatieId: String! #identificatie van de organisatie
    organisatieIdType: String! # type identificatie van de organisatie
    timestamp: Time!
    abonnementId: UUID!
    eventType: [EventTypeCUD]!
    recordId: String! # example: "https://api.ciz.nl/wlzindicatieregister/wlzindicaties/da8ebd42-d29b-4508-8604-ae7d2c6bbddd" 
} 
"""

"""
  Codelijsten - enums
"""

# EventType =- specificatie voor welke gebeurtenissen er een abonnement wordt afgesloten. all = alle gebeurtenissen / create = alleen aanmaken / update = alleen wijzigingen
enum EventTypeAll {
  ALL
  CREATE
  UPDATE
  DELETE
}

# EventType =- specificatie voor welke gebeurtenissen er een abonnement wordt afgesloten. all = alle gebeurtenissen / create = alleen aanmaken / update = alleen wijzigingen
enum EventTypeCUD {
  CREATE
  UPDATE
  DELETE
}

# deleteResponse = return codes voor delete abonnement
enum deleteResponse  {
  204 #Abonnement verwijderd
  404 #abonnementId niet gevonden
}
