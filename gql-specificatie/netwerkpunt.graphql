""" 
  Graphql Schemadefinitie tbv interactie met het netwerkpunt.
  Versie 0.0.1

  contact:
    name: "iStandaarden"
    url: "https://istandaarden.nl"
    email: info@istandaarden.nl
"""
scalar UUID
scalar Date
scalar Time

schema {
  query: Query
  mutation: Mutation
}

"""
  Queries
"""
type Query {
    # Abonnement callback
    abonnementCallback($xRequestID: xRequestID!): Abonnement!

    # Abonnement ophalen met ID
    getAbonnement($id: abonnementId!): Abonnement!

    # notificatie
    getNotificatie($xOrgKey: xOrgKey!, $xRequestID: xRequestID!): Abonnement!

    # consent(s) ophalen 
    getConsent($xRequestID: String!, $Scope: scope, $onderwerp: onderwerp, $wettelijkeGrondslag: wettelijkeGrondslag, $afgiftedatumBegin: Time, $afgiftedatumEind: Time, $vervaldatumBegin: Time, $vervaldatumEind: Time): Consent!
}

"""
  Mutaties
"""
type Mutation {
    # Abonnement Mutations
    processAbonnement(input: ProcessAbonnement!): Abonnement!

    # Abonnement delete
    deleteAbonnement(input: DeleteAbonnement!): Abonnement!
}

"""
  Objects
"""
# Abonnement
type Abonnement {
    xOrgKey: Int! # Uniek ID van het netwerkpunt binnen het netwerk
    xRequestID: String! # Identificatie van het request
    id: UUID! # AbonnementID
    organisatieId: String! #identificatie van de organisatie
    organisatieIdType: String! # type identificatie van de organisatie
    abonnementType: [AbonnementType]! # voor welke type abonnement is gezet
    eventType: [EventTypeAll]! # voor welke gebeurtenis(sen) abonnement is gezet
    entiteit: String! # entiteit waarop het abonnement geplaatst moet worden
    recordId: String # Identificatie van het record waarop het abonnement geplaatst wordt
    personId: String # Identificatie van de persoon waarop het abonnement geplaatst wordt
    createdAt: Time! 
    updatedAt: Time!
    deletedAt: Time
}

input ProcessAbonnement {
    xOrgKey: Int! # Uniek ID van het netwerkpunt binnen het netwerk
    xRequestID: String! # Identificatie van het request
    organisatieId: String! #identificatie van de organisatie
    organisatieIdType: String! # type identificatie van de organisatie
    abonnementType: [AbonnementType]! # type abonnenment
    eventType: [EventTypeAll]! # voor welke gebeurtenis(sen) abonnement gezet wordt
    entiteit: String! # entiteit waarop het abonnement geplaatst moet worden
    recordId: String # example: "https://api.ciz.nl/wlzindicatieregister/wlzindicaties/da8ebd42-d29b-4508-8604-ae7d2c6bbddd" 
    personId: String # Identificatie van de persoon waarop het abonnement geplaatst wordt
}

input DeleteAbonnement {
    xOrgKey: Int! # Uniek ID van het netwerkpunt binnen het netwerk
    xRequestID: String! # Identificatie van het request
    id: UUID! # AbonnementID
    deletedAt: Time!
}

type consent {
    xRequestID: String!
    consentId: UUID! # Consent identificatie
    scope: String! # Scope van de consent
    onderwerp: String! # Onderwerp van de consent
    wettelijkeGrondslag: String! # Wettelijke grondslag van de consent
    afgiftedatum: Time! # Afgiftedatum consent
    vervaldatum: Time # Vervaldatum consent
    createdAt: Time! 
    updatedAt: Time!
    deletedAt: Time
}


"""
Notificatie type is niet nodig want is subset van abonnement. Een select van de onderstaande kolommen uit type Abonnement zou voldoende moeten zijn
# Notificatie
type Notificatie {
    xOrgKey: Int! # Uniek ID van het netwerkpunt binnen het netwerk
    xRequestID: String! # Identificatie van het request
    organisatieId: String! #identificatie van de organisatie
    organisatieIdType: String! # type identificatie van de organisatie
    timestamp: Time!
    abonnementId: UUID!
    eventType: [EventTypeCUD]!
    recordId: String! # example: "https://api.ciz.nl/wlzindicatieregister/wlzindicaties/da8ebd42-d29b-4508-8604-ae7d2c6bbddd" 
} 
"""

"""
  Codelijsten - enums
"""
# Abonnementtype - Type abonement dat geplaatst moet worden
enum Abonnementtype {
    organisatie
    record
    persoon
}

# EventType =- specificatie voor welke gebeurtenissen er een abonnement wordt afgesloten. all = alle gebeurtenissen / create = alleen aanmaken / update = alleen wijzigingen
enum EventTypeAll {
    all
    create
    update
    delete
}

# EventType =- specificatie voor welke gebeurtenissen er een abonnement wordt afgesloten. all = alle gebeurtenissen / create = alleen aanmaken / update = alleen wijzigingen
enum EventTypeCUD {
    create
    update
    delete
}